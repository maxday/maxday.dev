<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Maxime David (maxday)</title><link>https://maxday.dev/posts/</link><description>Recent content in Posts on Maxime David (maxday)</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Sep 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://maxday.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust on AWS App Runner - Part 2</title><link>https://maxday.dev/posts/2023-09-04-rust-on-aws-app-runner-2/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0800</pubDate><guid>https://maxday.dev/posts/2023-09-04-rust-on-aws-app-runner-2/</guid><description>Hey hey hey üçï!
This is the second part of this series, make sure you&amp;rsquo;ve already read the first part :)
In the first part, we saw how to create a basic Rust API with a GET /pizza endpoint to retrieve the list of pizza.
In this part, let&amp;rsquo;s see how to containerize our app!
Let&amp;rsquo;s create our container Since AWS App Runner is a fully managed container application service, we definitely need a container!</description></item><item><title>Rust on AWS App Runner - Part 1</title><link>https://maxday.dev/posts/2023-08-21-rust-on-aws-app-runner/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate><guid>https://maxday.dev/posts/2023-08-21-rust-on-aws-app-runner/</guid><description>Hey hey hey üçï!
Over the past few months, I&amp;rsquo;ve been advocating for Rust on AWS Lambda a lot!
Here is a quick recap in case you missed it!
Live coding a AWS Lambda in Rust with TDD Lambda-Perf tool where Rust is killing the cold start game By the way, we&amp;rsquo;re almost at 256 ‚≠êÔ∏è which is ü§Ø for a side project! I&amp;rsquo;m sure we can do it!
Rust Linz Meetup where I gave a talk about Serverless + Rust But as you may know, serverless is NOT only about AWS Lambda.</description></item><item><title>How I Discovered That the AWS Lambda Runtime Might Be Written in Go</title><link>https://maxday.dev/posts/2023-08-02-lambda-runtime-api-is-written-in-go/</link><pubDate>Wed, 02 Aug 2023 00:00:00 +0800</pubDate><guid>https://maxday.dev/posts/2023-08-02-lambda-runtime-api-is-written-in-go/</guid><description>Have you ever wondered how your Lambda function code is triggered?
Each runtime has to conform to the AWS Lambda runtime API.
In managed runtimes, you don&amp;rsquo;t need to take care of that; that&amp;rsquo;s the whole point of using a managed runtime! AWS takes care of that for you.
But how?
It&amp;rsquo;s hard to say because it&amp;rsquo;s not clearly documented. However, while I was conducting some unrelated experiments, I made a very cool discovery!</description></item><item><title>Benchmarking Rust for Serverless</title><link>https://maxday.dev/posts/2023-04-13-benchmarking-rust-for-serverless/</link><pubDate>Thu, 13 Apr 2023 00:00:00 +0800</pubDate><guid>https://maxday.dev/posts/2023-04-13-benchmarking-rust-for-serverless/</guid><description>Let&amp;rsquo;s start with two very important questions:
Why should I care to benchmark Rust since it&amp;rsquo;s already super fast? That&amp;rsquo;s the question we&amp;rsquo;ll try to answer in this post!
Will there be a üçï demo? Of course, you know that I&amp;rsquo;m a true üçïüçïüçï lover!
What&amp;rsquo;s so special about Serverless? Benchmarking is not specific to serverless. But in serverless components, such as AWS Lambda functions, performance really matters for two main reasons:</description></item><item><title>How to test println!</title><link>https://maxday.dev/posts/2022-11-22-how-to-test-println-in-rust/</link><pubDate>Tue, 22 Nov 2022 00:00:00 +0800</pubDate><guid>https://maxday.dev/posts/2022-11-22-how-to-test-println-in-rust/</guid><description>Let&amp;rsquo;s say we want to test that a function is correctly outputting something.
Our function may looks like this simple example: print n times the name given in parameter.
fn greeting(nb: i32, name: &amp;amp;str) { for _ in 0..nb { println!(&amp;#34;hi {}&amp;#34;, name); } } How to test it? ü§î It looks hard.
One easy way is to refactor our code using a Trait. You can see Traits as interfaces.</description></item></channel></rss>